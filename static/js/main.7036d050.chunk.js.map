{"version":3,"sources":["containers/Notepad/Notepad.js","App.js","serviceWorker.js","index.js","containers/Notepad/Notepad.module.css"],"names":["useState","localStorage","getItem","text","setText","saving","setsaving","showSaving","setShowSaving","savingText","buttons","Row","Col","className","classes","button_row","ButtonGroup","Button","size","onClick","PrintJs","variant","filename","element","document","createElement","setAttribute","encodeURIComponent","style","display","body","appendChild","click","removeChild","downloadAsTxt","height","window","innerHeight","Card","Header","Body","full","id","notepad","join","value","onChange","e","target","setTimeout","setItem","App","Notepad","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"wTAUe,aAAU,MAIGA,mBAASC,aAAaC,QAAQ,YAJjC,mBAIdC,EAJc,KAIRC,EAJQ,OAKOJ,oBAAS,GALhB,mBAKdK,EALc,KAKNC,EALM,OAMeN,oBAAS,GANxB,mBAMdO,EANc,KAMFC,EANE,KAsCjBC,EAAa,KACbF,IAEIE,EADDJ,EACc,0CAEA,wCAIrB,IAAIK,EACA,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACA,yBAAKC,UAAWC,IAAQC,YACnBN,IAGL,kBAACG,EAAA,EAAD,KACA,kBAACI,EAAA,EAAD,CAAaH,UAAWC,IAAQC,YAI5B,kBAACE,EAAA,EAAD,CAAQC,KAAK,KAAKC,QAAS,kBAAIC,IAAQ,UAAW,SAASC,QAAQ,aAAnE,SACA,kBAACJ,EAAA,EAAD,CAAQC,KAAK,KAAKC,QAAS,kBAhCjB,SAACG,EAAUnB,GAC7B,IAAIoB,EAAUC,SAASC,cAAc,KACrCF,EAAQG,aAAa,OAAQ,iCAAmCC,mBAAmBxB,IACnFoB,EAAQG,aAAa,WAAYJ,GACjCC,EAAQK,MAAMC,QAAU,OACxBL,SAASM,KAAKC,YAAYR,GAC1BA,EAAQS,QACRR,SAASM,KAAKG,YAAYV,GAyBaW,CAAc,UAAW/B,IAAOkB,QAAQ,aAAvE,eAMZ,OACI,yBAAKO,MAAO,CAACO,OAAO,GAAD,OAAKC,OAAOC,YAAc,GAA1B,QACf,kBAACC,EAAA,EAAKC,OAAN,KACK7B,GAEL,kBAAC4B,EAAA,EAAKE,KAAN,CAAW3B,UAAWC,IAAQ2B,MAC1B,8BAAUC,GAAG,UAAU7B,UAAW,CAACC,IAAQ6B,QAAS7B,IAAQ2B,MAAMG,KAAK,KAAMC,MAAO1C,EAAM2C,SA5DjF,SAAAC,GACjB3C,EAAQ2C,EAAEC,OAAOH,OACjBvC,GAAU,GACVE,GAAc,GACdyC,YAAW,WACP3C,GAAU,KACZ,KACFL,aAAaiD,QAAQ,UAAWH,EAAEC,OAAOH,aChBlCM,MARf,WACE,OACE,yBAAKtC,UAAU,OACZ,kBAACuC,EAAD,QCIaC,QACW,cAA7BjB,OAAOkB,SAASC,UAEe,UAA7BnB,OAAOkB,SAASC,UAEhBnB,OAAOkB,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFnC,SAASoC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBExI5BC,EAAOC,QAAU,CAAC,QAAU,yBAAyB,KAAO,sBAAsB,WAAa,+B","file":"static/js/main.7036d050.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport Card from 'react-bootstrap/Card'\nimport PrintJs from 'print-js';\nimport Button from 'react-bootstrap/Button'\nimport Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\n\nimport classes from './Notepad.module.css';\n\nexport default function(){\n\n    // to store the texts that user type\n    // 'text' is used to store the value and 'setText' is used to change 'text' with new value.\n    const [text, setText] = useState(localStorage.getItem('notepad'));\n    const [saving, setsaving] = useState(false);\n    const [showSaving, setShowSaving] = useState(false);\n\n\n    // handleChange is called when user makes any changes in notepad. It -\n        // - store the new value in 'text'\n        // - sets localStorage with new value for persistance\n    const handleChange = e => {\n        setText(e.target.value);\n        setsaving(true);\n        setShowSaving(true);\n        setTimeout(()=>{\n            setsaving(false);\n        },500)\n        localStorage.setItem('notepad', e.target.value);\n    }\n\n    // downloadAsTxt is used to download text file with all content, \n    // it is called when Download button is clicked. It-\n    // - create a new element <a/> and changes its attributes ( href to a text file )\n    // which will contain all text and will download a file if clicked.\n    // - We programatically call .click() on <a/> to download the text file.\n    // for more refer https://www.w3schools.com/tags/att_a_download.asp\n    const downloadAsTxt = (filename, text) => {\n        var element = document.createElement('a');\n        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n        element.setAttribute('download', filename);\n        element.style.display = 'none';\n        document.body.appendChild(element);\n        element.click();\n        document.body.removeChild(element);\n      }\n\n    let savingText = null;\n    if (showSaving) {\n        if(saving) {\n            savingText = <span>saving..</span>;\n        }else{\n            savingText = <span>saved</span>;\n        }\n    }\n\n    let buttons = (\n        <Row >\n            <Col>\n            <div className={classes.button_row}>\n                {savingText}\n            </div>\n            </Col>\n            <Col>\n            <ButtonGroup className={classes.button_row}>\n                 {/* our PrintJs takes 2 input - 1) ID of the element that it will print, (in out case id is 'notepad')  */}\n                 {/* 2) Type of the element  */}\n                {/* visit html printing https://printjs.crabbly.com/ */}\n                <Button size=\"sm\" onClick={()=>PrintJs('notepad', 'html')} variant=\"secondary\">Print</Button>\n                <Button size=\"sm\" onClick={()=>downloadAsTxt('notepad', text)} variant=\"secondary\">Download</Button>\n            </ButtonGroup>                \n            </Col>\n        </Row>\n    )\n\n    return (\n        <div style={{height: `${window.innerHeight - 40}px`}}>\n            <Card.Header>\n                {buttons}\n            </Card.Header>\n            <Card.Body className={classes.full} >\n                <textarea id=\"notepad\" className={[classes.notepad, classes.full].join(' ')} value={text} onChange={handleChange}></textarea>\n            </Card.Body>\n        </div>\n    )\n}","import React from 'react';\nimport './App.css';\n\nimport Notepad from './containers/Notepad/Notepad';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {<Notepad />}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notepad\":\"Notepad_notepad__3Vvq9\",\"full\":\"Notepad_full__2UbHW\",\"button_row\":\"Notepad_button_row__2hNrf\"};"],"sourceRoot":""}